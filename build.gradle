buildscript {
	ext {
		springBootVersion = '1.3.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'com.eriwen:gradle-css-plugin:1.11.1'
        classpath 'com.eriwen:gradle-js-plugin:1.12.0'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'js'
apply plugin: 'css'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenLocal()
	jcenter()
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
	maven { url 'https://repo.spring.io/libs-milestone' }
	maven { url "https://repo.spring.io/libs-release" }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Brixton.RC2"
    }
}

dependencies {
	compile('org.springframework.boot:spring-boot-devtools')
	compile "org.springframework.session:spring-session"
	compile "org.springframework.boot:spring-boot-starter-redis"
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.cloud:spring-cloud-starter-oauth2')
    compile('org.springframework.cloud:spring-cloud-starter-zuul')
    compile 'org.webjars:jquery:2.2.1'
    compile 'org.webjars:bootstrap:3.3.6'
	compile 'org.webjars:bootstrap-social:4.9.0'
    compile 'org.webjars:font-awesome:4.5.0'
    compile 'org.webjars:angularjs:1.5.5'
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.11'
}

tasks.minifyJs.dependsOn tasks.combineJs
tasks.gzipJs.dependsOn tasks.minifyJs

def getModuleFiles() {

    def list = fileTree("src/main/resources/static/app").filter { it.isFile() && it.absolutePath.contains("module.") && it.absolutePath.contains(".js")}.files.path

    def files = new LinkedList()
    list.each {
        files.add(it.substring(it.indexOf("src"), it.length()))
    }

    files.add(1, "src/main/resources/static/app/shared/core/core.js")
    files.add("src/main/resources/static/app/app.js")
    return files
}

def getJsFiles() {
    def list = fileTree("src/main/resources/static/app").filter {
        it.isFile() && !it.absolutePath.contains("app.js") && !it.absolutePath.contains("module.") && it.absolutePath.contains(".js")
    }.files.path

    def files = []
    list.each {
        files.add(it.substring(it.indexOf("src"), it.length()))
    }

    return files
}

combineJs {
    // pull together the source from string & file lists
    //  eg. def core = ["$webAppDirName/init.js",...]
    // show the resolved files when gradle is run with -d
    def files = []
    files.addAll(getModuleFiles())
    files.addAll(getJsFiles())

    source = files
    dest = file("${buildDir}/resources/main/static/assets/js/main.js")
}

minifyJs {
    source = combineJs
    dest = file("${buildDir}/resources/main/static/assets/js/main.min.js")
    sourceMap = file("${buildDir}/resources/main/static/assets/js/main.sourcemap.json")
    closure {
        warningLevel = 'QUIET'
    }
}
gzipJs {
    source = minifyJs.dest
    dest = file("${buildDir}/resources/main/resources/static/assets/js/main.min.js.gz")
}